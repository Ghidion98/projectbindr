{"version":3,"file":"login.js","sources":["../../../../Umbraco.Web.UI.Login/src/contexts/auth.repository.ts","../../../../Umbraco.Web.UI.Login/src/contexts/auth.context.ts","../../../../Umbraco.Web.UI.Login/src/controllers/slim-backoffice-initializer.ts","../../../../Umbraco.Web.UI.Login/src/umbraco-package.ts","../../../../Umbraco.Web.UI.Login/src/auth.element.ts","../../../../Umbraco.Web.UI.Login/src/components/layouts/auth-layout.element.ts","../../../../Umbraco.Web.UI.Login/src/components/layouts/confirmation-layout.element.ts","../../../../Umbraco.Web.UI.Login/src/components/layouts/error-layout.element.ts","../../../../Umbraco.Web.UI.Login/src/components/layouts/new-password-layout.element.ts","../../../../Umbraco.Web.UI.Login/src/components/pages/invite.page.element.ts","../../../../Umbraco.Web.UI.Login/src/components/pages/login.page.element.ts","../../../../Umbraco.Web.UI.Login/src/utils/load-custom-view.function.ts","../../../../Umbraco.Web.UI.Login/src/components/pages/mfa.page.element.ts","../../../../Umbraco.Web.UI.Login/src/components/pages/new-password.page.element.ts","../../../../Umbraco.Web.UI.Login/src/components/pages/reset-password.page.element.ts","../../../../Umbraco.Web.UI.Login/src/components/back-to-login-button.element.ts"],"sourcesContent":["import {\r\n  LoginRequestModel,\r\n  LoginResponse, MfaCodeResponse,\r\n  NewPasswordResponse,\r\n  PasswordConfigurationModel,\r\n  ResetPasswordResponse,\r\n  ValidateInviteCodeResponse,\r\n  ValidatePasswordResetCodeResponse\r\n} from \"../types.js\";\r\nimport { UmbRepositoryBase } from \"@umbraco-cms/backoffice/repository\";\r\nimport { UmbLocalizationController } from \"@umbraco-cms/backoffice/localization-api\";\r\nimport {\r\n  ApiError,\r\n  CancelError,\r\n  ProblemDetails,\r\n  SecurityService,\r\n  UserService\r\n} from \"@umbraco-cms/backoffice/external/backend-api\";\r\nimport { tryExecute } from \"@umbraco-cms/backoffice/resources\";\r\n\r\nexport class UmbAuthRepository extends UmbRepositoryBase {\r\n  #localize = new UmbLocalizationController(this);\r\n\r\n  public async login(data: LoginRequestModel): Promise<LoginResponse> {\r\n    try {\r\n      const request = new Request('management/api/v1/security/back-office/login', {\r\n        method: 'POST',\r\n        body: JSON.stringify({\r\n          username: data.username,\r\n          password: data.password,\r\n        }),\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n      });\r\n\r\n      const response = await fetch(request);\r\n\r\n      if (!response.ok) {\r\n        // If the response code is 402, it means that the user has enabled 2-factor authentication\r\n        if (response.status === 402) {\r\n          const responseData = await response.json();\r\n          return {\r\n            status: response.status,\r\n            twoFactorView: responseData.twoFactorLoginView ?? '',\r\n            twoFactorProviders: responseData.enabledTwoFactorProviderNames ?? [],\r\n          };\r\n        }\r\n\r\n        return {\r\n          status: response.status,\r\n          error: await this.#getErrorText(response),\r\n        };\r\n      }\r\n\r\n      return {\r\n        status: response.status,\r\n        data: {\r\n          username: data.username,\r\n        },\r\n      };\r\n    } catch (error) {\r\n      return {\r\n        status: 500,\r\n        error: error instanceof Error ? error.message : this.#localize.term('auth_receivedErrorFromServer'),\r\n      };\r\n    }\r\n  }\r\n\r\n  public async validateMfaCode(code: string, provider: string): Promise<MfaCodeResponse> {\r\n    try {\r\n      const requestData = new Request('management/api/v1/security/back-office/verify-2fa', {\r\n        method: 'POST',\r\n        body: JSON.stringify({\r\n          code,\r\n          provider,\r\n        }),\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n      });\r\n\r\n      const response = await fetch(requestData);\r\n\r\n      if (!response.ok) {\r\n        return {\r\n          error: response.status === 400 ? this.#localize.term('auth_mfaInvalidCode') : await this.#getErrorText(response),\r\n        };\r\n      }\r\n\r\n      return {};\r\n    } catch (error) {\r\n      return {\r\n        error: error instanceof Error ? error.message : this.#localize.term('auth_receivedErrorFromServer'),\r\n      };\r\n    }\r\n  }\r\n\r\n  public async resetPassword(email: string): Promise<ResetPasswordResponse> {\r\n    const response = await tryExecute(SecurityService.postSecurityForgotPassword({\r\n      requestBody: {\r\n        email\r\n      }\r\n    }))\r\n\r\n    if (response.error) {\r\n      return {\r\n        error: this.#getApiErrorDetailText(response.error, 'Could not reset the password'),\r\n      };\r\n    }\r\n\r\n    return {};\r\n  }\r\n\r\n  public async validatePasswordResetCode(userId: string, resetCode: string): Promise<ValidatePasswordResetCodeResponse> {\r\n    const { data, error } = await tryExecute(SecurityService.postSecurityForgotPasswordVerify({\r\n      requestBody: {\r\n        user: {\r\n          id: userId\r\n        },\r\n        resetCode\r\n      }\r\n    }));\r\n\r\n    if (error || !data) {\r\n      return {\r\n        error: this.#getApiErrorDetailText(error, 'Could not validate the password reset code')\r\n      };\r\n    }\r\n\r\n    return {\r\n      passwordConfiguration: (data as unknown as {passwordConfiguration: PasswordConfigurationModel}).passwordConfiguration // TODO: Fix this when the API schema has been updated\r\n    };\r\n  }\r\n\r\n  public async newPassword(password: string, resetCode: string, userId: string): Promise<NewPasswordResponse> {\r\n    const response = await tryExecute(SecurityService.postSecurityForgotPasswordReset({\r\n      requestBody: {\r\n        password,\r\n        resetCode,\r\n        user: {\r\n          id: userId\r\n        }\r\n      }\r\n    }));\r\n\r\n    if (response.error) {\r\n      return {\r\n        error: this.#getApiErrorDetailText(response.error, 'Could not reset the password'),\r\n      };\r\n    }\r\n\r\n    return {};\r\n  }\r\n\r\n  public async validateInviteCode(token: string, userId: string): Promise<ValidateInviteCodeResponse> {\r\n    const { data, error } = await tryExecute(UserService.postUserInviteVerify({\r\n      requestBody: {\r\n        token,\r\n        user: {\r\n          id: userId\r\n        }\r\n      }\r\n    }));\r\n\r\n    if (error || !data) {\r\n      return {\r\n        error: this.#getApiErrorDetailText(error, 'Could not validate the invite code')\r\n      };\r\n    }\r\n\r\n    return {\r\n      passwordConfiguration: (data as unknown as {passwordConfiguration: PasswordConfigurationModel}).passwordConfiguration // TODO: Fix this when the API schema has been updated\r\n    };\r\n  }\r\n\r\n  public async newInvitedUserPassword(password: string, token: string, userId: string): Promise<NewPasswordResponse> {\r\n    const response = await tryExecute(UserService.postUserInviteCreatePassword({\r\n      requestBody: {\r\n        password,\r\n        token,\r\n        user: {\r\n          id: userId\r\n        }\r\n      }\r\n    }));\r\n\r\n    if (response.error) {\r\n      return {\r\n        error: this.#getApiErrorDetailText(response.error, 'Could not create a password for the invited user')\r\n      };\r\n    }\r\n\r\n    return {};\r\n  }\r\n\r\n  #getApiErrorDetailText(error: ApiError | CancelError | undefined, fallbackText?: string): string | undefined {\r\n    if (error instanceof ApiError) {\r\n      // Try to parse the body\r\n      return typeof error.body === 'object' ? (error.body as ProblemDetails).title ?? fallbackText : fallbackText ?? 'An unknown error occurred.';\r\n    }\r\n\r\n    // Ignore cancel errors (user cancelled the request)\r\n    if (error instanceof CancelError) {\r\n      return undefined;\r\n    }\r\n\r\n    return fallbackText ?? 'An unknown error occurred.';\r\n  }\r\n\r\n  async #getErrorText(response: Response): Promise<string> {\r\n    switch (response.status) {\r\n      case 400:\r\n      case 401:\r\n        return this.#localize.term('auth_userFailedLogin');\r\n\r\n      case 402:\r\n        return this.#localize.term('auth_mfaText');\r\n\r\n      case 403:\r\n        return this.#localize.term('auth_userLockedOut');\r\n\r\n      default:\r\n        return (\r\n          this.#localize.term('auth_receivedErrorFromServer')\r\n        );\r\n    }\r\n  }\r\n}\r\n","import {\r\n  LoginRequestModel,\r\n  LoginResponse,\r\n  ResetPasswordResponse,\r\n  ValidatePasswordResetCodeResponse,\r\n  NewPasswordResponse,\r\n  PasswordConfigurationModel, ValidateInviteCodeResponse, MfaCodeResponse\r\n} from \"../types.js\";\r\nimport { UmbAuthRepository } from './auth.repository.js';\r\nimport { UmbContextBase } from \"@umbraco-cms/backoffice/class-api\";\r\nimport { UmbContextToken } from \"@umbraco-cms/backoffice/context-api\";\r\n\r\nexport class UmbAuthContext extends UmbContextBase<UmbAuthContext> {\r\n  readonly supportsPersistLogin = false;\r\n  twoFactorView = '';\r\n  isMfaEnabled = false;\r\n  mfaProviders: string[] = [];\r\n  passwordConfiguration?: PasswordConfigurationModel;\r\n\r\n  #authRepository = new UmbAuthRepository(this);\r\n\r\n  #returnPath = '';\r\n\r\n  set returnPath(value: string) {\r\n    this.#returnPath = value;\r\n  }\r\n\r\n  /**\r\n   * Gets the return path from the query string.\r\n   *\r\n   * It will first look for a `ReturnUrl` parameter, then a `returnPath` parameter, and finally the `returnPath` property.\r\n   *\r\n   * @returns The return path from the query string.\r\n   */\r\n  get returnPath(): string {\r\n    const params = new URLSearchParams(window.location.search);\r\n    let returnPath = params.get('ReturnUrl') ?? params.get('returnPath') ?? this.#returnPath;\r\n\r\n    // If return path is empty, return an empty string.\r\n    if (!returnPath) {\r\n      return '';\r\n    }\r\n\r\n    // Safely check that the return path is valid and doesn't link to an external site.\r\n    const url = new URL(returnPath, window.location.origin);\r\n\r\n    if (url.origin !== window.location.origin) {\r\n      return '';\r\n    }\r\n\r\n    return url.toString();\r\n  }\r\n\r\n  login(data: LoginRequestModel): Promise<LoginResponse> {\r\n    return this.#authRepository.login(data);\r\n  }\r\n\r\n  resetPassword(username: string): Promise<ResetPasswordResponse> {\r\n    return this.#authRepository.resetPassword(username);\r\n  }\r\n\r\n  validatePasswordResetCode(userId: string, resetCode: string): Promise<ValidatePasswordResetCodeResponse> {\r\n    return this.#authRepository.validatePasswordResetCode(userId, resetCode);\r\n  }\r\n\r\n  newPassword(password: string, resetCode: string, userId: string): Promise<NewPasswordResponse> {\r\n    return this.#authRepository.newPassword(password, resetCode, userId);\r\n  }\r\n\r\n  newInvitedUserPassword(password: string, token: string, userId: string): Promise<NewPasswordResponse> {\r\n    return this.#authRepository.newInvitedUserPassword(password, token, userId);\r\n  }\r\n\r\n  validateInviteCode(token: string, userId: string): Promise<ValidateInviteCodeResponse> {\r\n    return this.#authRepository.validateInviteCode(token, userId);\r\n  }\r\n\r\n  validateMfaCode(code: string, provider: string): Promise<MfaCodeResponse> {\r\n    return this.#authRepository.validateMfaCode(code, provider);\r\n  }\r\n}\r\n\r\nexport const UMB_AUTH_CONTEXT = new UmbContextToken<UmbAuthContext>('UmbAuthContext');\r\n","import {\r\n  UmbBundleExtensionInitializer,\r\n  UmbServerExtensionRegistrator\r\n} from \"@umbraco-cms/backoffice/extension-api\";\r\nimport {\r\n  UmbAppEntryPointExtensionInitializer,\r\n  umbExtensionsRegistry\r\n} from \"@umbraco-cms/backoffice/extension-registry\";\r\nimport type { UmbElement } from \"@umbraco-cms/backoffice/element-api\";\r\nimport { UmbControllerBase } from \"@umbraco-cms/backoffice/class-api\";\r\nimport { UUIIconRegistryEssential } from \"@umbraco-cms/backoffice/external/uui\";\r\n\r\n// We import what we need from the Backoffice app.\r\n// In the future the login screen app will be a part of the Backoffice app, and we will not need to import these.\r\nimport '@umbraco-cms/backoffice/localization';\r\n\r\n/**\r\n * This is the initializer for the slim backoffice.\r\n * It is responsible for initializing the backoffice and only the extensions that is needed to run the login screen.\r\n */\r\nexport class UmbSlimBackofficeController extends UmbControllerBase {\r\n  #uuiIconRegistry = new UUIIconRegistryEssential();\r\n\r\n  constructor(host: UmbElement) {\r\n    super(host);\r\n    new UmbBundleExtensionInitializer(host, umbExtensionsRegistry);\r\n    new UmbAppEntryPointExtensionInitializer(host, umbExtensionsRegistry);\r\n    new UmbServerExtensionRegistrator(host, umbExtensionsRegistry).registerPublicExtensions();\r\n\r\n    this.#uuiIconRegistry.attach(host);\r\n\r\n    host.classList.add('uui-text');\r\n    host.classList.add('uui-font');\r\n  }\r\n}\r\n","import type { ManifestBundle } from \"@umbraco-cms/backoffice/extension-api\";\r\n\r\nexport const name = 'Umbraco.Auth';\r\nexport const version = '1.0.0';\r\nexport const extensions: Array<ManifestBundle> = [\r\n  {\r\n    name: 'Auth Bundle',\r\n    alias: 'Umb.Auth.Bundle',\r\n    type: 'bundle',\r\n    js: () => import('./manifests.js'),\r\n  },\r\n];\r\n","import { html, customElement, property, ifDefined } from '@umbraco-cms/backoffice/external/lit';\r\nimport { UmbLitElement } from \"@umbraco-cms/backoffice/lit-element\";\r\nimport type { InputType, UUIFormLayoutItemElement } from \"@umbraco-cms/backoffice/external/uui\";\r\nimport { umbExtensionsRegistry } from \"@umbraco-cms/backoffice/extension-registry\";\r\n\r\nimport { UMB_AUTH_CONTEXT, UmbAuthContext } from \"./contexts\";\r\nimport { UmbSlimBackofficeController } from \"./controllers\";\r\n\r\n// We import the authStyles here so that we can inline it in the shadow DOM that is created outside of the UmbAuthElement.\r\nimport authStyles from './auth-styles.css?inline';\r\n\r\n// Import the main bundle\r\nimport { extensions } from './umbraco-package.js';\r\n\r\nconst createInput = (opts: {\r\n  id: string;\r\n  type: InputType;\r\n  name: string;\r\n  autocomplete: AutoFill;\r\n  label: string;\r\n  inputmode: string;\r\n  autofocus?: boolean;\r\n}) => {\r\n  const input = document.createElement('input');\r\n  input.type = opts.type;\r\n  input.name = opts.name;\r\n  input.autocomplete = opts.autocomplete;\r\n  input.id = opts.id;\r\n  input.required = true;\r\n  input.inputMode = opts.inputmode;\r\n  input.ariaLabel = opts.label;\r\n  input.autofocus = opts.autofocus || false;\r\n\r\n  return input;\r\n};\r\n\r\nconst createLabel = (opts: { forId: string; localizeAlias: string; localizeFallback: string; }) => {\r\n  const label = document.createElement('label');\r\n  const umbLocalize: any = document.createElement('umb-localize');\r\n  umbLocalize.key = opts.localizeAlias;\r\n  umbLocalize.innerHTML = opts.localizeFallback;\r\n  label.htmlFor = opts.forId;\r\n  label.appendChild(umbLocalize);\r\n\r\n  return label;\r\n};\r\n\r\nconst createFormLayoutItem = (label: HTMLLabelElement, input: HTMLInputElement) => {\r\n  const formLayoutItem = document.createElement('uui-form-layout-item') as UUIFormLayoutItemElement;\r\n  formLayoutItem.appendChild(label);\r\n  formLayoutItem.appendChild(input);\r\n\r\n  return formLayoutItem;\r\n};\r\n\r\nconst createForm = (elements: HTMLElement[]) => {\r\n  const styles = document.createElement('style');\r\n  styles.innerHTML = authStyles;\r\n  const form = document.createElement('form');\r\n  form.id = 'umb-login-form';\r\n  form.name = 'login-form';\r\n  form.spellcheck = false;\r\n\r\n  elements.push(styles);\r\n  elements.forEach((element) => form.appendChild(element));\r\n\r\n  return form;\r\n};\r\n\r\n@customElement('umb-auth')\r\nexport default class UmbAuthElement extends UmbLitElement {\r\n  /**\r\n   * Disables the local login form and only allows external login providers.\r\n   *\r\n   * @attr disable-local-login\r\n   */\r\n  @property({type: Boolean, attribute: 'disable-local-login'})\r\n  disableLocalLogin = false;\r\n\r\n  @property({attribute: 'background-image'})\r\n  backgroundImage?: string;\r\n\r\n  @property({attribute: 'logo-image'})\r\n  logoImage?: string;\r\n\r\n  @property({attribute: 'logo-image-alternative'})\r\n  logoImageAlternative?: string;\r\n\r\n  @property({type: Boolean, attribute: 'username-is-email'})\r\n  usernameIsEmail = false;\r\n\r\n  @property({type: Boolean, attribute: 'allow-password-reset'})\r\n  allowPasswordReset = false;\r\n\r\n  @property({type: Boolean, attribute: 'allow-user-invite'})\r\n  allowUserInvite = false;\r\n\r\n  @property({attribute: 'return-url'})\r\n  set returnPath(value: string) {\r\n    this.#authContext.returnPath = value;\r\n  }\r\n  get returnPath() {\r\n    return this.#authContext.returnPath;\r\n  }\r\n\r\n  /**\r\n   * Override the default flow.\r\n   */\r\n  protected flow?: 'mfa' | 'reset-password' | 'invite-user';\r\n\r\n  _form?: HTMLFormElement;\r\n  _usernameLayoutItem?: UUIFormLayoutItemElement;\r\n  _passwordLayoutItem?: UUIFormLayoutItemElement;\r\n  _usernameInput?: HTMLInputElement;\r\n  _passwordInput?: HTMLInputElement;\r\n  _usernameLabel?: HTMLLabelElement;\r\n  _passwordLabel?: HTMLLabelElement;\r\n\r\n  #authContext = new UmbAuthContext(this, UMB_AUTH_CONTEXT);\r\n\r\n  constructor() {\r\n    super();\r\n\r\n    (this as unknown as EventTarget).addEventListener('umb-login-flow', (e) => {\r\n      if (e instanceof CustomEvent) {\r\n        this.flow = e.detail.flow || undefined;\r\n      }\r\n      this.requestUpdate();\r\n    });\r\n\r\n    // Bind the (slim) Backoffice controller to this element so that we can use utilities from the Backoffice app.\r\n    new UmbSlimBackofficeController(this);\r\n\r\n    // Register the main package for Umbraco.Auth\r\n    umbExtensionsRegistry.registerMany(extensions);\r\n  }\r\n\r\n  firstUpdated() {\r\n    setTimeout(() => {\r\n      requestAnimationFrame(() => {\r\n        this.#initializeForm();\r\n      });\r\n    }, 100);\r\n  }\r\n\r\n  disconnectedCallback() {\r\n    super.disconnectedCallback();\r\n    this._usernameLayoutItem?.remove();\r\n    this._passwordLayoutItem?.remove();\r\n    this._usernameLabel?.remove();\r\n    this._usernameInput?.remove();\r\n    this._passwordLabel?.remove();\r\n    this._passwordInput?.remove();\r\n  }\r\n\r\n  /**\r\n   * Creates the login form and adds it to the DOM in the default slot.\r\n   * This is done to avoid having to deal with the shadow DOM, which is not supported in Google Chrome for autocomplete/autofill.\r\n   *\r\n   * @see Track this intent-to-ship for Chrome https://groups.google.com/a/chromium.org/g/blink-dev/c/RY9leYMu5hI?pli=1\r\n   * @private\r\n   */\r\n  #initializeForm() {\r\n    const labelUsername = this.usernameIsEmail\r\n      ? this.localize.term('auth_email')\r\n      : this.localize.term('auth_username');\r\n    const labelPassword = this.localize.term('auth_password');\r\n\r\n    this._usernameInput = createInput({\r\n      id: 'username-input',\r\n      type: 'text',\r\n      name: 'username',\r\n      autocomplete: 'username',\r\n      label: labelUsername,\r\n      inputmode: this.usernameIsEmail ? 'email' : '',\r\n      autofocus: true,\r\n    });\r\n    this._passwordInput = createInput({\r\n      id: 'password-input',\r\n      type: 'password',\r\n      name: 'password',\r\n      autocomplete: 'current-password',\r\n      label: labelPassword,\r\n      inputmode: '',\r\n    });\r\n    this._usernameLabel = createLabel({\r\n      forId: 'username-input',\r\n      localizeAlias: this.usernameIsEmail ? 'auth_email' : 'auth_username',\r\n      localizeFallback: this.usernameIsEmail ? 'Email' : 'Username',\r\n    });\r\n    this._passwordLabel = createLabel({forId: 'password-input', localizeAlias: 'auth_password', localizeFallback: 'Password'});\r\n\r\n    this._usernameLayoutItem = createFormLayoutItem(this._usernameLabel, this._usernameInput);\r\n    this._passwordLayoutItem = createFormLayoutItem(this._passwordLabel, this._passwordInput);\r\n\r\n    this._form = createForm([this._usernameLayoutItem, this._passwordLayoutItem]);\r\n\r\n    this.insertAdjacentElement('beforeend', this._form);\r\n  }\r\n\r\n  render() {\r\n    return html`\r\n      <umb-auth-layout\r\n        background-image=${ifDefined(this.backgroundImage)}\r\n        logo-image=${ifDefined(this.logoImage)}\r\n        logo-image-alternative=${ifDefined(this.logoImageAlternative)}>\r\n        ${this._renderFlowAndStatus()}\r\n      </umb-auth-layout>\r\n    `;\r\n  }\r\n\r\n  private _renderFlowAndStatus() {\r\n    if (this.disableLocalLogin) {\r\n      return html`\r\n        <umb-error-layout no-back-link>\r\n          <umb-localize key=\"auth_localLoginDisabled\">Unfortunately, it is not possible to log in directly. It has been disabled by a login provider.</umb-localize>\r\n        </umb-error-layout>\r\n      `;\r\n    }\r\n\r\n    const searchParams = new URLSearchParams(window.location.search);\r\n    let flow = this.flow || searchParams.get('flow')?.toLowerCase();\r\n    const status = searchParams.get('status');\r\n\r\n    if (status === 'resetCodeExpired') {\r\n      return html`\r\n        <umb-error-layout\r\n          message=${this.localize.term('auth_resetCodeExpired')}>\r\n        </umb-error-layout>`;\r\n    }\r\n\r\n    if (flow === 'invite-user' && status === 'false') {\r\n      return html`\r\n        <umb-error-layout\r\n          message=${this.localize.term('auth_userInviteExpiredMessage')}>\r\n        </umb-error-layout>`;\r\n    }\r\n\r\n    // validate\r\n    if (flow) {\r\n      if (flow === 'mfa' && !this.#authContext.isMfaEnabled) {\r\n        flow = undefined;\r\n      }\r\n    }\r\n\r\n    switch (flow) {\r\n      case 'mfa':\r\n        return html`\r\n          <umb-mfa-page></umb-mfa-page>`;\r\n      case 'reset':\r\n        return html`\r\n          <umb-reset-password-page></umb-reset-password-page>`;\r\n      case 'reset-password':\r\n        return html`\r\n          <umb-new-password-page></umb-new-password-page>`;\r\n      case 'invite-user':\r\n        return html`\r\n          <umb-invite-page></umb-invite-page>`;\r\n\r\n      default:\r\n        return html`\r\n          <umb-login-page\r\n            ?allow-password-reset=${this.allowPasswordReset}\r\n            ?username-is-email=${this.usernameIsEmail}>\r\n            <slot></slot>\r\n            <slot name=\"subheadline\" slot=\"subheadline\"></slot>\r\n          </umb-login-page>`;\r\n    }\r\n  }\r\n}\r\n\r\ndeclare global {\r\n  interface HTMLElementTagNameMap {\r\n    'umb-auth': UmbAuthElement;\r\n  }\r\n}\r\n","import { UmbLitElement } from '@umbraco-cms/backoffice/lit-element';\r\nimport { css, CSSResultGroup, html, nothing, PropertyValueMap, customElement, property, when } from '@umbraco-cms/backoffice/external/lit';\r\n\r\n/**\r\n * The auth layout component.\r\n *\r\n * @element umb-auth-layout\r\n * @slot - The content of the layout\r\n * @cssprop --umb-login-background - The background of the layout (default: #f4f4f4)\r\n * @cssprop --umb-login-primary-color - The color of the headline (default: #283a97)\r\n * @cssprop --umb-login-text-color - The color of the text (default: #000)\r\n * @cssprop --umb-login-header-font-size - The font-size of the headline (default: 3rem)\r\n * @cssprop --umb-login-header-font-size-large - The font-size of the headline on large screens (default: 4rem)\r\n * @cssprop --umb-login-header-secondary-font-size - The font-size of the secondary headline (default: 2.4rem)\r\n * @cssprop --umb-login-image - The background of the image wrapper (default: the value of the backgroundImage property)\r\n * @cssprop --umb-login-image-display - The display of the image wrapper (default: flex)\r\n * @cssprop --umb-login-image-border-radius - The border-radius of the image wrapper (default: 38px)\r\n * @cssprop --umb-login-content-background - The background of the content wrapper (default: none)\r\n * @cssprop --umb-login-content-display - The display of the content wrapper (default: flex)\r\n * @cssprop --umb-login-content-width - The width of the content wrapper (default: 100%)\r\n * @cssprop --umb-login-content-height - The height of the content wrapper (default: 100%)\r\n * @cssprop --umb-login-content-border-radius - The border-radius of the content wrapper (default: 0)\r\n * @cssprop --umb-login-align-items - The align-items of the main wrapper (default: unset)\r\n * @cssprop --umb-login-button-border-radius - The border-radius of the buttons (default: 45px)\r\n * @cssprop --umb-login-curves-color - The color of the curves (default: #f5c1bc)\r\n * @cssprop --umb-login-curves-display - The display of the curves (default: inline)\r\n */\r\n@customElement('umb-auth-layout')\r\nexport class UmbAuthLayoutElement extends UmbLitElement {\r\n  @property({ attribute: 'background-image' })\r\n  backgroundImage?: string;\r\n\r\n  @property({ attribute: 'logo-image' })\r\n  logoImage?: string;\r\n\r\n  @property({ attribute: 'logo-image-alternative' })\r\n  logoImageAlternative?: string;\r\n\r\n  protected updated(_changedProperties: PropertyValueMap<any> | Map<PropertyKey, unknown>): void {\r\n    super.updated(_changedProperties);\r\n\r\n    if (_changedProperties.has<keyof this>('backgroundImage')) {\r\n      this.style.setProperty('--logo-alternative-display', this.backgroundImage ? 'none' : 'unset');\r\n      this.style.setProperty('--image', `url('${this.backgroundImage}') no-repeat center center/cover`);\r\n    }\r\n  }\r\n\r\n  #renderImageContainer() {\r\n    if (!this.backgroundImage) return nothing;\r\n\r\n    return html`\r\n      <div id=\"image-container\">\r\n        <div id=\"image\">\r\n          <svg\r\n            id=\"curve-top\"\r\n            width=\"1746\"\r\n            height=\"1374\"\r\n            viewBox=\"0 0 1746 1374\"\r\n            fill=\"none\"\r\n            xmlns=\"http://www.w3.org/2000/svg\">\r\n            <path d=\"M8 1C61.5 722.5 206.5 1366.5 1745.5 1366.5\" stroke=\"currentColor\" stroke-width=\"15\"/>\r\n          </svg>\r\n          <svg\r\n            id=\"curve-bottom\"\r\n            width=\"1364\"\r\n            height=\"552\"\r\n            viewBox=\"0 0 1364 552\"\r\n            fill=\"none\"\r\n            xmlns=\"http://www.w3.org/2000/svg\">\r\n            <path d=\"M1 8C387 24 1109 11 1357 548\" stroke=\"currentColor\" stroke-width=\"15\"/>\r\n          </svg>\r\n\r\n          ${when(\r\n            this.logoImage,\r\n            () => html`<img id=\"logo-on-image\" src=${this.logoImage} alt=\"logo\" aria-hidden=\"true\"/>`\r\n          )}\r\n        </div>\r\n      </div>\r\n    `;\r\n  }\r\n\r\n  #renderContent() {\r\n    return html`\r\n      <div id=\"content-container\">\r\n        <div id=\"content\">\r\n          <slot></slot>\r\n        </div>\r\n      </div>\r\n    `;\r\n  }\r\n\r\n  render() {\r\n    return html`\r\n      <div id=${this.backgroundImage ? 'main' : 'main-no-image'}>\r\n        ${this.#renderImageContainer()} ${this.#renderContent()}\r\n      </div>\r\n      ${when(\r\n        this.logoImageAlternative,\r\n        () => html`<img id=\"logo-on-background\" src=${this.logoImageAlternative!} alt=\"logo\" aria-hidden=\"true\"/>`\r\n      )}\r\n    `;\r\n  }\r\n\r\n  static styles: CSSResultGroup = [\r\n    css`\r\n      :host {\r\n        --uui-color-interactive: var(--umb-login-primary-color, #283a97);\r\n        --uui-button-border-radius: var(--umb-login-button-border-radius, 45px);\r\n        --uui-color-default: var(--uui-color-interactive);\r\n        --uui-button-height: 42px;\r\n        --uui-select-height: 38px;\r\n\r\n        --input-height: 40px;\r\n        --header-font-size: var(--umb-login-header-font-size, 3rem);\r\n        --header-secondary-font-size: var(--umb-login-header-secondary-font-size, 2.4rem);\r\n        --curves-color: var(--umb-login-curves-color, #f5c1bc);\r\n        --curves-display: var(--umb-login-curves-display, inline);\r\n\r\n        display: block;\r\n        background: var(--umb-login-background, #f4f4f4);\r\n        color: var(--umb-login-text-color, #000);\r\n      }\r\n\r\n      #main-no-image,\r\n      #main {\r\n        max-width: 1920px;\r\n        display: flex;\r\n        justify-content: center;\r\n        height: 100vh;\r\n        padding: 8px;\r\n        box-sizing: border-box;\r\n        margin: 0 auto;\r\n      }\r\n\r\n      #image-container {\r\n        display: var(--umb-login-image-display, none);\r\n        width: 100%;\r\n      }\r\n\r\n      #content-container {\r\n        background: var(--umb-login-content-background, none);\r\n        display: var(--umb-login-content-display, flex);\r\n        width: var(--umb-login-content-width, 100%);\r\n        height: var(--umb-login-content-height, 100%);\r\n        box-sizing: border-box;\r\n        overflow: auto;\r\n        border-radius: var(--umb-login-content-border-radius, 0);\r\n      }\r\n\r\n      #content {\r\n        max-width: 360px;\r\n        margin: auto;\r\n        width: 100%;\r\n      }\r\n\r\n      #image {\r\n        background: var(--umb-login-image, var(--image));\r\n        width: 100%;\r\n        height: 100%;\r\n        border-radius: var(--umb-login-image-border-radius, 38px);\r\n        position: relative;\r\n        overflow: hidden;\r\n        color: var(--curves-color);\r\n      }\r\n\r\n      #image svg {\r\n        position: absolute;\r\n        width: 45%;\r\n        height: fit-content;\r\n        display: var(--curves-display);\r\n      }\r\n\r\n      #curve-top {\r\n        top: 0;\r\n        right: 0;\r\n      }\r\n\r\n      #curve-bottom {\r\n        bottom: 0;\r\n        left: 0;\r\n      }\r\n\r\n      #logo-on-image,\r\n      #logo-on-background {\r\n        position: absolute;\r\n        top: 24px;\r\n        left: 24px;\r\n        height: 55px;\r\n      }\r\n\r\n      @media only screen and (min-width: 900px) {\r\n        :host {\r\n          --header-font-size: var(--umb-login-header-font-size-large, 4rem);\r\n        }\r\n\r\n        #main {\r\n          padding: 32px;\r\n          padding-right: 0;\r\n          align-items: var(--umb-login-align-items, unset);\r\n        }\r\n\r\n        #image-container {\r\n          display: var(--umb-login-image-display, block);\r\n        }\r\n\r\n        #content-container {\r\n          display: var(--umb-login-content-display, flex);\r\n          padding: 16px;\r\n        }\r\n\r\n        #logo-on-background {\r\n          display: var(--logo-alternative-display);\r\n        }\r\n      }\r\n    `,\r\n  ];\r\n}\r\n\r\ndeclare global {\r\n  interface HTMLElementTagNameMap {\r\n    'umb-auth-layout': UmbAuthLayoutElement;\r\n  }\r\n}\r\n","import { CSSResultGroup, css, html, customElement, property } from '@umbraco-cms/backoffice/external/lit';\r\nimport { UmbLitElement } from \"@umbraco-cms/backoffice/lit-element\";\r\n\r\n@customElement('umb-confirmation-layout')\r\nexport default class UmbConfirmationLayoutElement extends UmbLitElement {\r\n  @property({ type: String })\r\n  header = '';\r\n\r\n  @property({ type: String })\r\n  message = '';\r\n\r\n  render() {\r\n    return html`\r\n      <header id=\"header\">\r\n        <h1>${this.header}</h1>\r\n        <span>${this.message}</span>\r\n      </header>\r\n\r\n      <umb-back-to-login-button></umb-back-to-login-button>\r\n\r\n      <slot></slot>\r\n    `;\r\n  }\r\n\r\n  static styles: CSSResultGroup = [\r\n    css`\r\n      :host {\r\n        display: flex;\r\n        flex-direction: column;\r\n        gap: var(--uui-size-layout-1);\r\n      }\r\n\r\n      #header {\r\n        text-align: center;\r\n        display: flex;\r\n        flex-direction: column;\r\n        gap: var(--uui-size-space-5);\r\n      }\r\n\r\n      #header span {\r\n        color: var(--uui-color-text-alt); /* TODO Change to uui color when uui gets a muted text variable */\r\n        font-size: 14px;\r\n      }\r\n\r\n      #header h1 {\r\n        margin: 0;\r\n        font-weight: 400;\r\n        font-size: var(--header-secondary-font-size);\r\n        color: var(--uui-color-interactive);\r\n        line-height: 1.2;\r\n      }\r\n\r\n      uui-button {\r\n        width: 100%;\r\n        margin-top: var(--uui-size-space-5);\r\n        --uui-button-padding-top-factor: 1.5;\r\n        --uui-button-padding-bottom-factor: 1.5;\r\n      }\r\n    `,\r\n  ];\r\n}\r\n\r\ndeclare global {\r\n  interface HTMLElementTagNameMap {\r\n    'umb-confirmation-layout': UmbConfirmationLayoutElement;\r\n  }\r\n}\r\n","import { CSSResultGroup, css, html, customElement, property } from '@umbraco-cms/backoffice/external/lit';\r\nimport { UmbLitElement } from \"@umbraco-cms/backoffice/lit-element\";\r\n\r\n@customElement('umb-error-layout')\r\nexport default class UmbErrorLayoutElement extends UmbLitElement {\r\n  @property({ type: String })\r\n  header = '';\r\n\r\n  @property({ type: String })\r\n  message = '';\r\n\r\n  @property({ type: Boolean, attribute: 'no-back-link' })\r\n  noBackLink = false;\r\n\r\n  render() {\r\n    return html`\r\n      <header id=\"header\">\r\n        <h1>${this.header?.length ? this.header : html`<umb-localize key=\"auth_friendlyGreeting\">Hi there</umb-localize>`}</h1>\r\n        <span>${this.message}</span>\r\n      </header>\r\n      <slot></slot>\r\n      ${!this.noBackLink ? html`<umb-back-to-login-button></umb-back-to-login-button>`: ''}\r\n    `;\r\n  }\r\n\r\n  static styles: CSSResultGroup = [\r\n    css`\r\n      :host {\r\n        display: flex;\r\n        flex-direction: column;\r\n        gap: var(--uui-size-layout-1);\r\n      }\r\n\r\n      #header {\r\n        text-align: center;\r\n        display: flex;\r\n        flex-direction: column;\r\n        gap: var(--uui-size-space-5);\r\n      }\r\n\r\n      #header span {\r\n        color: var(--uui-color-text-alt); /* TODO Change to uui color when uui gets a muted text variable */\r\n        font-size: 14px;\r\n      }\r\n\r\n      #header h1 {\r\n        margin: 0;\r\n        font-weight: 400;\r\n        font-size: var(--header-secondary-font-size);\r\n        color: var(--uui-color-interactive);\r\n        line-height: 1.2;\r\n      }\r\n\r\n      ::slotted(uui-button) {\r\n        width: 100%;\r\n        margin-top: var(--uui-size-space-5);\r\n        --uui-button-padding-top-factor: 1.5;\r\n        --uui-button-padding-bottom-factor: 1.5;\r\n      }\r\n    `,\r\n  ];\r\n}\r\n\r\ndeclare global {\r\n  interface HTMLElementTagNameMap {\r\n    'umb-error-layout': UmbErrorLayoutElement;\r\n  }\r\n}\r\n","import type { UUIButtonState, UUIInputPasswordElement } from '@umbraco-cms/backoffice/external/uui';\r\nimport { type CSSResultGroup, css, html, nothing, customElement, property, query, state } from '@umbraco-cms/backoffice/external/lit';\r\nimport { UmbLitElement } from \"@umbraco-cms/backoffice/lit-element\";\r\n\r\nimport { UMB_AUTH_CONTEXT } from '../../contexts';\r\n\r\n@customElement('umb-new-password-layout')\r\nexport default class UmbNewPasswordLayoutElement extends UmbLitElement {\r\n  @query('#password')\r\n  passwordElement!: UUIInputPasswordElement;\r\n\r\n  @query('#confirmPassword')\r\n  confirmPasswordElement!: UUIInputPasswordElement;\r\n\r\n  @property()\r\n  state: UUIButtonState = undefined;\r\n\r\n  @property()\r\n  error: string = '';\r\n\r\n  @property()\r\n  userId: string = '';\r\n\r\n  @property({ type: Boolean, attribute: 'is-invite' })\r\n  isInvite = false;\r\n\r\n  @state()\r\n  _passwordConfiguration?: typeof UMB_AUTH_CONTEXT.TYPE['passwordConfiguration'];\r\n\r\n  @state()\r\n  _passwordPattern = '';\r\n\r\n  constructor() {\r\n    super();\r\n\r\n    this.consumeContext(UMB_AUTH_CONTEXT, (authContext) => {\r\n      this._passwordConfiguration = authContext.passwordConfiguration;\r\n      // Build a pattern\r\n      let pattern = '';\r\n      if (this._passwordConfiguration?.requireDigit) {\r\n        pattern += '(?=.*\\\\d)';\r\n      }\r\n      if (this._passwordConfiguration?.requireLowercase) {\r\n        pattern += '(?=.*[a-z])';\r\n      }\r\n      if (this._passwordConfiguration?.requireUppercase) {\r\n        pattern += '(?=.*[A-Z])';\r\n      }\r\n      if (this._passwordConfiguration?.requireNonLetterOrDigit) {\r\n        pattern += '(?=.*\\\\W)';\r\n      }\r\n      pattern += `.{${this._passwordConfiguration?.minimumPasswordLength ?? 10},}`;\r\n      this._passwordPattern = pattern;\r\n    });\r\n  }\r\n\r\n  #onSubmit(event: Event) {\r\n    event.preventDefault();\r\n    if (!this._passwordConfiguration) return;\r\n\r\n    const form = event.target as HTMLFormElement;\r\n\r\n    this.passwordElement.setCustomValidity('');\r\n    this.confirmPasswordElement.setCustomValidity('');\r\n\r\n    if (!form) return;\r\n    if (!form.checkValidity()) return;\r\n\r\n    const formData = new FormData(form);\r\n    const password = formData.get('password') as string;\r\n    const passwordConfirm = formData.get('confirmPassword') as string;\r\n\r\n    let passwordIsInvalid = false;\r\n\r\n    if (this._passwordConfiguration.minimumPasswordLength > 0 && password.length < this._passwordConfiguration.minimumPasswordLength) {\r\n      passwordIsInvalid = true;\r\n    }\r\n\r\n    if (this._passwordConfiguration.requireNonLetterOrDigit) {\r\n      const hasNonLetterOrDigit = /\\W/.test(password);\r\n      if (!hasNonLetterOrDigit) {\r\n        passwordIsInvalid = true;\r\n      }\r\n    }\r\n\r\n    if (this._passwordConfiguration.requireDigit) {\r\n      const hasDigit = /\\d/.test(password);\r\n      if (!hasDigit) {\r\n        passwordIsInvalid = true;\r\n      }\r\n    }\r\n\r\n    if (this._passwordConfiguration.requireLowercase) {\r\n      const hasLowercase = /[a-z]/.test(password);\r\n      if (!hasLowercase) {\r\n        passwordIsInvalid = true;\r\n      }\r\n    }\r\n\r\n    if (this._passwordConfiguration.requireUppercase) {\r\n      const hasUppercase = /[A-Z]/.test(password);\r\n      if (!hasUppercase) {\r\n        passwordIsInvalid = true;\r\n      }\r\n    }\r\n\r\n    if (passwordIsInvalid) {\r\n      const passwordValidityText = this.localize.term(\r\n        'auth_errorInPasswordFormat',\r\n        this._passwordConfiguration.minimumPasswordLength,\r\n        this._passwordConfiguration.requireNonLetterOrDigit ? 1 : 0\r\n      ) ?? 'The password does not meet the minimum requirements!';\r\n      this.passwordElement.setCustomValidity(passwordValidityText);\r\n      return;\r\n    }\r\n\r\n    if (password !== passwordConfirm) {\r\n      const passwordValidityText = this.localize.term(\r\n        'auth_passwordMismatch'\r\n      ) ?? \"The confirmed password doesn't match the new password!\";\r\n      this.confirmPasswordElement.setCustomValidity(passwordValidityText);\r\n      return;\r\n    }\r\n\r\n    this.dispatchEvent(new CustomEvent('submit', {detail: {password}}));\r\n  }\r\n\r\n  renderHeader() {\r\n    if (this.isInvite) {\r\n      return html`\r\n        <h1>Hi!</h1>\r\n        <span>\r\n          <umb-localize key=\"auth_userInviteWelcomeMessage\">\r\n            Welcome to Umbraco! Just need to get your password setup and then you're good to go\r\n          </umb-localize>\r\n        </span>\r\n      `;\r\n    } else {\r\n      return html`\r\n        <h1>\r\n          <umb-localize key=\"auth_newPassword\">New password</umb-localize>\r\n        </h1>\r\n        <span>\r\n            <umb-localize key=\"auth_setPasswordInstruction\">Please provide a new password.</umb-localize>\r\n        </span>\r\n      `;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return html`\r\n      <uui-form>\r\n        <form id=\"LoginForm\" name=\"login\" @submit=${this.#onSubmit}>\r\n          <header id=\"header\">${this.renderHeader()}</header>\r\n          <uui-form-layout-item>\r\n            <uui-label id=\"passwordLabel\" for=\"password\" slot=\"label\" required>\r\n              <umb-localize key=\"auth_newPassword\">New password</umb-localize>\r\n            </uui-label>\r\n            <uui-input-password\r\n              type=\"password\"\r\n              id=\"password\"\r\n              name=\"password\"\r\n              autocomplete=\"new-password\"\r\n              pattern=\"${this._passwordPattern}\"\r\n              .minlength=${this._passwordConfiguration?.minimumPasswordLength}\r\n              .minlengthMessage=${this.localize.term('auth_passwordMinLength', this._passwordConfiguration?.minimumPasswordLength ?? 10)}\r\n              .label=${this.localize.term('auth_newPassword')}\r\n              required\r\n              required-message=${this.localize.term('auth_passwordIsBlank')}>\r\n            </uui-input-password>\r\n          </uui-form-layout-item>\r\n\r\n          <uui-form-layout-item>\r\n            <uui-label id=\"confirmPasswordLabel\" for=\"confirmPassword\" slot=\"label\" required>\r\n              <umb-localize key=\"auth_confirmNewPassword\">Confirm new password</umb-localize>\r\n            </uui-label>\r\n            <uui-input-password\r\n              type=\"password\"\r\n              id=\"confirmPassword\"\r\n              name=\"confirmPassword\"\r\n              autocomplete=\"new-password\"\r\n              pattern=\"${this._passwordPattern}\"\r\n              .minlength=${this._passwordConfiguration?.minimumPasswordLength}\r\n              .minlengthMessage=${this.localize.term('auth_passwordMinLength', this._passwordConfiguration?.minimumPasswordLength ?? 10)}\r\n              .label=${this.localize.term('auth_confirmNewPassword')}\r\n              required\r\n              required-message=${this.localize.term('auth_required')}></uui-input-password>\r\n          </uui-form-layout-item>\r\n\r\n          ${this.#renderErrorMessage()}\r\n\r\n          <uui-button\r\n            type=\"submit\"\r\n            label=${this.localize.term('auth_continue')}\r\n            look=\"primary\"\r\n            color=\"default\"\r\n            .state=${this.state}></uui-button>\r\n        </form>\r\n      </uui-form>\r\n\r\n      <umb-back-to-login-button style=\"margin-top: var(--uui-size-space-6)\"></umb-back-to-login-button>\r\n    `;\r\n  }\r\n\r\n  #renderErrorMessage() {\r\n    if (!this.error || this.state !== 'failed') return nothing;\r\n\r\n    return html`<span class=\"text-danger\">${this.error}</span>`;\r\n  }\r\n\r\n  static styles: CSSResultGroup = [\r\n    css`\r\n      #header {\r\n        text-align: center;\r\n        display: flex;\r\n        flex-direction: column;\r\n        gap: var(--uui-size-space-5);\r\n      }\r\n\r\n      #header span {\r\n        color: var(--uui-color-text-alt); /* TODO Change to uui color when uui gets a muted text variable */\r\n        font-size: 14px;\r\n      }\r\n\r\n      #header h1 {\r\n        margin: 0;\r\n        font-weight: 400;\r\n        font-size: var(--header-secondary-font-size);\r\n        color: var(--uui-color-interactive);\r\n        line-height: 1.2;\r\n      }\r\n\r\n      form {\r\n        display: flex;\r\n        flex-direction: column;\r\n        gap: var(--uui-size-space-5);\r\n      }\r\n\r\n      uui-form-layout-item {\r\n        margin: 0;\r\n      }\r\n\r\n      uui-input-password {\r\n        width: 100%;\r\n        height: var(--input-height);\r\n        border-radius: var(--uui-border-radius);\r\n      }\r\n\r\n      uui-button {\r\n        width: 100%;\r\n        margin-top: var(--uui-size-space-5);\r\n        --uui-button-padding-top-factor: 1.5;\r\n        --uui-button-padding-bottom-factor: 1.5;\r\n      }\r\n\r\n      .text-danger {\r\n        color: var(--uui-color-danger-standalone);\r\n      }\r\n    `,\r\n  ];\r\n}\r\n\r\ndeclare global {\r\n  interface HTMLElementTagNameMap {\r\n    'umb-new-password-layout': UmbNewPasswordLayoutElement;\r\n  }\r\n}\r\n","import type { UUIButtonState } from '@umbraco-cms/backoffice/external/uui';\r\nimport { html, customElement, state } from '@umbraco-cms/backoffice/external/lit';\r\nimport { UmbLitElement } from '@umbraco-cms/backoffice/lit-element';\r\nimport { UMB_AUTH_CONTEXT } from \"../../contexts\";\r\n\r\n@customElement('umb-invite-page')\r\nexport default class UmbInvitePageElement extends UmbLitElement {\r\n  #token = '';\r\n  #userId = '';\r\n\r\n  @state()\r\n  state: UUIButtonState = undefined;\r\n\r\n  @state()\r\n  error = '';\r\n\r\n  @state()\r\n  loading = true;\r\n\r\n  #authContext?: typeof UMB_AUTH_CONTEXT.TYPE;\r\n\r\n  constructor() {\r\n    super();\r\n\r\n    this.consumeContext(UMB_AUTH_CONTEXT, (authContext) => {\r\n      this.#authContext = authContext;\r\n      this.#init();\r\n    });\r\n  }\r\n\r\n  async #init() {\r\n    const urlParams = new URLSearchParams(window.location.search);\r\n    const token = urlParams.get('inviteCode');\r\n    const userId = urlParams.get('userId');\r\n\r\n    if (!token || !userId) {\r\n      this.error = 'The invite has expired or is invalid';\r\n      this.loading = false;\r\n      return;\r\n    }\r\n\r\n    if (!this.#authContext) return;\r\n\r\n    this.#token = token;\r\n    this.#userId = userId;\r\n\r\n    const response = await this.#authContext.validateInviteCode(this.#token, this.#userId);\r\n\r\n    if (response.error) {\r\n      this.error = response.error;\r\n      this.loading = false;\r\n      return;\r\n    }\r\n\r\n    if (!response.passwordConfiguration) {\r\n      this.error = 'There is no password configuration for the invite code. Please contact the administrator.';\r\n      this.loading = false;\r\n      return;\r\n    }\r\n\r\n    this.#authContext.passwordConfiguration = response.passwordConfiguration;\r\n    this.loading = false;\r\n  }\r\n\r\n  async #onSubmit(event: CustomEvent) {\r\n    event.preventDefault();\r\n    const password = event.detail.password;\r\n\r\n    if (!password) return;\r\n\r\n    if (!this.#authContext) return;\r\n\r\n    this.state = 'waiting';\r\n    const response = await this.#authContext.newInvitedUserPassword(password, this.#token, this.#userId);\r\n\r\n    if (response.error) {\r\n      this.error = response.error;\r\n      this.state = 'failed';\r\n      return;\r\n    }\r\n\r\n    this.state = 'success';\r\n    window.location.href = this.#authContext.returnPath;\r\n  }\r\n\r\n  render() {\r\n    return this.loading ? html`<uui-loader-bar></uui-loader-bar>` : (\r\n      this.error\r\n        ? html`\r\n          <umb-error-layout\r\n            header=${this.localize.term('auth_error')}\r\n            message=${this.error ?? this.localize.term('auth_defaultError')}>\r\n          </umb-error-layout>`\r\n      : html`\r\n        <umb-new-password-layout\r\n          @submit=${this.#onSubmit}\r\n          is-invite\r\n          .userId=${this.#userId}\r\n          .state=${this.state}\r\n          .error=${this.error}></umb-new-password-layout>`\r\n    );\r\n  }\r\n}\r\n\r\ndeclare global {\r\n  interface HTMLElementTagNameMap {\r\n    'umb-invite-page': UmbInvitePageElement;\r\n  }\r\n}\r\n","import type { UUIButtonState } from '@umbraco-cms/backoffice/external/uui';\r\nimport { UmbLitElement } from '@umbraco-cms/backoffice/lit-element';\r\nimport { css, type CSSResultGroup, html, nothing, when, customElement, property, queryAssignedElements, state } from '@umbraco-cms/backoffice/external/lit';\r\n\r\nimport { UMB_AUTH_CONTEXT } from '../../contexts';\r\n\r\n@customElement('umb-login-page')\r\nexport default class UmbLoginPageElement extends UmbLitElement {\r\n  @property({type: Boolean, attribute: 'username-is-email'})\r\n  usernameIsEmail = false;\r\n\r\n  @queryAssignedElements({flatten: true})\r\n  protected slottedElements?: HTMLFormElement[];\r\n\r\n  @property({type: Boolean, attribute: 'allow-password-reset'})\r\n  allowPasswordReset = false;\r\n\r\n  @state()\r\n  private _loginState?: UUIButtonState;\r\n\r\n  @state()\r\n  private _loginError = '';\r\n\r\n  @state()\r\n  supportPersistLogin = false;\r\n\r\n  #formElement?: HTMLFormElement;\r\n\r\n  #authContext?: typeof UMB_AUTH_CONTEXT.TYPE;\r\n\r\n  constructor() {\r\n    super();\r\n\r\n    this.consumeContext(UMB_AUTH_CONTEXT, (authContext) => {\r\n      this.#authContext = authContext;\r\n      this.supportPersistLogin = authContext.supportsPersistLogin;\r\n    });\r\n  }\r\n\r\n  async #onSlotChanged() {\r\n    this.#formElement = this.slottedElements?.find((el) => el.id === 'umb-login-form');\r\n\r\n    if (!this.#formElement) return;\r\n\r\n    // We need to listen for the enter key to submit the form, because the uui-button does not support the native input fields submit event\r\n    this.#formElement.addEventListener('keypress', (e) => {\r\n      if (e.key === 'Enter') {\r\n        this.#onSubmitClick();\r\n      }\r\n    });\r\n    this.#formElement.onsubmit = this.#handleSubmit;\r\n  }\r\n\r\n  #handleSubmit = async (e: SubmitEvent) => {\r\n    e.preventDefault();\r\n\r\n    if (!this.#authContext) return;\r\n\r\n    const form = e.target as HTMLFormElement;\r\n    if (!form) return;\r\n\r\n    const formData = new FormData(form);\r\n\r\n    const username = formData.get('username') as string;\r\n    const password = formData.get('password') as string;\r\n    const persist = formData.has('persist');\r\n\r\n    if (!username || !password) {\r\n      this._loginError = this.localize.term('auth_userFailedLogin');\r\n      this._loginState = 'failed';\r\n      return;\r\n    }\r\n\r\n    this._loginState = 'waiting';\r\n\r\n    const response = await this.#authContext.login({\r\n      username,\r\n      password,\r\n      persist,\r\n    });\r\n\r\n    this._loginError = response.error || '';\r\n    this._loginState = response.error ? 'failed' : 'success';\r\n\r\n    // Check for 402 status code indicating that MFA is required\r\n    if (response.status === 402) {\r\n      this.#authContext.isMfaEnabled = true;\r\n      if (response.twoFactorView) {\r\n        this.#authContext.twoFactorView = response.twoFactorView;\r\n      }\r\n      if (response.twoFactorProviders) {\r\n        this.#authContext.mfaProviders = response.twoFactorProviders;\r\n      }\r\n\r\n      this.dispatchEvent(new CustomEvent('umb-login-flow', {composed: true, detail: {flow: 'mfa'}}));\r\n      return;\r\n    }\r\n\r\n    if (response.error) {\r\n      return;\r\n    }\r\n\r\n    const returnPath = this.#authContext.returnPath;\r\n\r\n    if (returnPath) {\r\n      location.href = returnPath;\r\n    }\r\n  };\r\n\r\n  get #greetingLocalizationKey() {\r\n    return [\r\n      'auth_greeting0',\r\n      'auth_greeting1',\r\n      'auth_greeting2',\r\n      'auth_greeting3',\r\n      'auth_greeting4',\r\n      'auth_greeting5',\r\n      'auth_greeting6',\r\n    ][new Date().getDay()];\r\n  }\r\n\r\n  #onSubmitClick = () => {\r\n    this.#formElement?.requestSubmit();\r\n  };\r\n\r\n  render() {\r\n    return html`\r\n      <header id=\"header\">\r\n        <h1 id=\"greeting\">\r\n          <umb-localize .key=${this.#greetingLocalizationKey}>Welcome</umb-localize>\r\n        </h1>\r\n        <slot name=\"subheadline\"></slot>\r\n      </header>\r\n      <slot @slotchange=${this.#onSlotChanged}></slot>\r\n      <div id=\"secondary-actions\">\r\n        ${when(\r\n          this.supportPersistLogin,\r\n          () => html`\r\n            <uui-form-layout-item>\r\n              <uui-checkbox\r\n                name=\"persist\"\r\n                .label=${this.localize.term('auth_rememberMe')}>\r\n                <umb-localize key=\"auth_rememberMe\">Remember me</umb-localize>\r\n              </uui-checkbox>\r\n            </uui-form-layout-item>`\r\n        )}\r\n        ${when(\r\n          this.allowPasswordReset,\r\n          () =>\r\n            html`\r\n              <button type=\"button\" id=\"forgot-password\" @click=${this.#handleForgottenPassword}>\r\n                <umb-localize key=\"auth_forgottenPassword\">Forgotten password?</umb-localize>\r\n              </button>`\r\n        )}\r\n      </div>\r\n      <uui-button\r\n        type=\"submit\"\r\n        id=\"umb-login-button\"\r\n        look=\"primary\"\r\n        @click=${this.#onSubmitClick}\r\n        .label=${this.localize.term('auth_login')}\r\n        color=\"default\"\r\n        .state=${this._loginState}></uui-button>\r\n\r\n      ${this.#renderErrorMessage()}\r\n    `;\r\n  }\r\n\r\n  #renderErrorMessage() {\r\n    if (!this._loginError || this._loginState !== 'failed') return nothing;\r\n\r\n    return html`<span class=\"text-error text-danger\">${this._loginError}</span>`;\r\n  }\r\n\r\n  #handleForgottenPassword() {\r\n    this.dispatchEvent(new CustomEvent('umb-login-flow', {composed: true, detail: {flow: 'reset'}}));\r\n  }\r\n\r\n  static styles: CSSResultGroup = [\r\n    css`\r\n      :host {\r\n        display: flex;\r\n        flex-direction: column;\r\n      }\r\n\r\n      #header {\r\n        text-align: center;\r\n        display: flex;\r\n        flex-direction: column;\r\n        gap: var(--uui-size-space-5);\r\n      }\r\n\r\n      #header span {\r\n        color: var(--uui-color-text-alt); /* TODO Change to uui color when uui gets a muted text variable */\r\n        font-size: 14px;\r\n      }\r\n\r\n      #greeting {\r\n        color: var(--uui-color-interactive);\r\n        text-align: center;\r\n        font-weight: 400;\r\n        font-size: var(--header-font-size);\r\n        margin: 0 0 var(--uui-size-layout-1);\r\n        line-height: 1.2;\r\n      }\r\n\r\n      #umb-login-button {\r\n        margin-top: var(--uui-size-space-4);\r\n        width: 100%;\r\n      }\r\n\r\n      #forgot-password {\r\n        cursor: pointer;\r\n        background: none;\r\n        border: 0;\r\n        height: 1rem;\r\n        color: var(--uui-color-text-alt); /* TODO Change to uui color when uui gets a muted text variable */\r\n        gap: var(--uui-size-space-1);\r\n        align-self: center;\r\n        text-decoration: none;\r\n        display: inline-flex;\r\n        line-height: 1;\r\n        font-size: 14px;\r\n        font-family: var(--uui-font-family),sans-serif;\r\n        margin-left: auto;\r\n        margin-bottom: var(--uui-size-space-3);\r\n      }\r\n\r\n      #forgot-password:hover {\r\n        color: var(--uui-color-interactive-emphasis);\r\n      }\r\n\r\n      .text-error {\r\n        margin-top: var(--uui-size-space-4);\r\n      }\r\n\r\n      .text-danger {\r\n        color: var(--uui-color-danger-standalone);\r\n      }\r\n\r\n      #secondary-actions {\r\n        display: flex;\r\n        align-items: center;\r\n        justify-content: space-between;\r\n      }\r\n    `,\r\n  ];\r\n}\r\n\r\ndeclare global {\r\n  interface HTMLElementTagNameMap {\r\n    'umb-login-page': UmbLoginPageElement;\r\n  }\r\n}\r\n","import { html, unsafeHTML } from '@umbraco-cms/backoffice/external/lit';\r\n\r\n/**\r\n * Try to load a custom view.\r\n * Supports both HTML and JS files (JS files must have a default export).\r\n *\r\n * @param view The path to the custom view.\r\n * @returns A view part.\r\n */\r\nexport async function loadCustomView<T extends HTMLElement>(view: string): Promise<T | string> {\r\n\tif (view.endsWith('.html')) {\r\n\t\treturn fetch(view).then((response) => response.text());\r\n\t}\r\n\r\n\tconst module = await import(/* @vite-ignore */ view);\r\n\r\n\tif (!module.default) throw new Error('No default export found');\r\n\r\n\treturn new module.default() as T;\r\n}\r\n\r\nexport function renderCustomView<T extends HTMLElement>(view: T | string) {\r\n\tif (typeof view === 'string') {\r\n\t\treturn html`${unsafeHTML(view)}`;\r\n\t}\r\n\r\n\treturn view;\r\n}\r\n","import type {UUIButtonState, UUIInputElement} from '@umbraco-cms/backoffice/external/uui';\r\nimport {css, html, nothing, customElement, state, until} from '@umbraco-cms/backoffice/external/lit';\r\nimport { UmbLitElement } from \"@umbraco-cms/backoffice/lit-element\";\r\n\r\nimport { loadCustomView, renderCustomView } from '../../utils/load-custom-view.function.js';\r\nimport { UMB_AUTH_CONTEXT } from \"../../contexts\";\r\n\r\ntype MfaCustomViewElement = HTMLElement & {\r\n  providers?: string[];\r\n  returnPath?: string;\r\n};\r\n\r\n@customElement('umb-mfa-page')\r\nexport default class UmbMfaPageElement extends UmbLitElement {\r\n  @state()\r\n  protected providers: Array<{ name: string; value: string; selected: boolean }> = [];\r\n\r\n  @state()\r\n  private buttonState?: UUIButtonState;\r\n\r\n  @state()\r\n  private error: string | null = null;\r\n\r\n  #authContext?: typeof UMB_AUTH_CONTEXT.TYPE;\r\n\r\n  constructor() {\r\n    super();\r\n    this.consumeContext(UMB_AUTH_CONTEXT, authContext => {\r\n      this.#authContext = authContext;\r\n      this.#loadProviders();\r\n    });\r\n  }\r\n\r\n  #loadProviders() {\r\n    this.providers = this.#authContext?.mfaProviders.map((provider) => ({name: provider, value: provider, selected: false})) ?? [];\r\n\r\n    if (this.providers.length) {\r\n      this.providers[0].selected = true;\r\n    } else {\r\n      this.error = 'Error: No providers available';\r\n    }\r\n  }\r\n\r\n  async #handleSubmit(e: SubmitEvent) {\r\n    e.preventDefault();\r\n\r\n    if (!this.#authContext) return;\r\n\r\n    this.error = null;\r\n\r\n    const form = e.target as HTMLFormElement;\r\n    if (!form) return;\r\n\r\n    const codeInput = form.elements.namedItem('mfacode') as UUIInputElement;\r\n\r\n    if (codeInput) {\r\n      codeInput.error = false;\r\n      codeInput.errorMessage = '';\r\n      codeInput.setCustomValidity('');\r\n    }\r\n\r\n    if (!form.checkValidity()) return;\r\n\r\n    const formData = new FormData(form);\r\n\r\n    let provider = formData.get('provider') as string;\r\n\r\n    // If no provider given, use the first one (there probably is only one anyway)\r\n    if (!provider) {\r\n      // If there are no providers, we can't continue\r\n      if (!this.providers.length) {\r\n        this.error = 'No providers available';\r\n        return;\r\n      }\r\n\r\n      provider = this.providers[0].value;\r\n    }\r\n\r\n    if (!provider) {\r\n      this.error = 'No provider selected';\r\n      return;\r\n    }\r\n\r\n    const code = formData.get('token') as string;\r\n\r\n    this.buttonState = 'waiting';\r\n\r\n    const response = await this.#authContext.validateMfaCode(code, provider);\r\n    if (response.error) {\r\n      if (codeInput) {\r\n        codeInput.error = true;\r\n        codeInput.errorMessage = response.error;\r\n      } else {\r\n        this.error = response.error;\r\n      }\r\n      this.buttonState = 'failed';\r\n      return;\r\n    }\r\n\r\n    this.buttonState = 'success';\r\n\r\n    const returnPath = this.#authContext.returnPath;\r\n    if (returnPath) {\r\n      location.href = returnPath;\r\n    }\r\n  }\r\n\r\n  protected renderDefaultView() {\r\n    return html`\r\n      <uui-form>\r\n        <form id=\"LoginForm\" @submit=${this.#handleSubmit} novalidate>\r\n          <header id=\"header\">\r\n            <h1>\r\n              <umb-localize key=\"auth_mfaTitle\">One last step</umb-localize>\r\n            </h1>\r\n\r\n            <p>\r\n              <umb-localize key=\"auth_mfaText\">\r\n                You have enabled 2-factor authentication and must verify your identity.\r\n              </umb-localize>\r\n            </p>\r\n          </header>\r\n\r\n          <!-- if there's only one provider active, it will skip this step! -->\r\n          ${this.providers.length > 1\r\n            ? html`\r\n              <uui-form-layout-item>\r\n                <uui-label id=\"providerLabel\" for=\"provider\" slot=\"label\" required>\r\n                  <umb-localize key=\"auth_mfaMultipleText\">Please choose a 2-factor provider</umb-localize>\r\n                </uui-label>\r\n                <uui-select label=${this.localize.term('auth_mfaMultipleText')} id=\"provider\" name=\"provider\" .options=${this.providers} aria-required=\"true\" required></uui-select>\r\n              </uui-form-layout-item>\r\n            `\r\n            : nothing}\r\n\r\n          <uui-form-layout-item>\r\n            <uui-label id=\"mfacodeLabel\" for=\"mfacode\" slot=\"label\" required>\r\n              <umb-localize key=\"auth_mfaCodeInput\">Verification code</umb-localize>\r\n            </uui-label>\r\n\r\n            <uui-input\r\n              autofocus\r\n              id=\"mfacode\"\r\n              type=\"text\"\r\n              name=\"token\"\r\n              inputmode=\"numeric\"\r\n              autocomplete=\"one-time-code\"\r\n              placeholder=${this.localize.term('auth_mfaCodeInputHelp')}\r\n              aria-required=\"true\"\r\n              required\r\n              required-message=${this.localize.term('auth_mfaCodeInputHelp')}\r\n              label=${this.localize.term('auth_mfaCodeInput')}\r\n              style=\"width:100%;\">\r\n            </uui-input>\r\n          </uui-form-layout-item>\r\n\r\n          ${this.error ? html` <span class=\"text-danger\">${this.error}</span> ` : nothing}\r\n\r\n          <uui-button\r\n            .state=${this.buttonState}\r\n            button-style=\"success\"\r\n            look=\"primary\"\r\n            color=\"default\"\r\n            label=${this.localize.term('auth_validate')}\r\n            type=\"submit\"></uui-button>\r\n        </form>\r\n      </uui-form>\r\n\r\n      <umb-back-to-login-button style=\"margin-top: var(--uui-size-space-6)\"></umb-back-to-login-button>\r\n    `;\r\n  }\r\n\r\n  protected async renderCustomView() {\r\n    const view = this.#authContext?.twoFactorView;\r\n    if (!view) return nothing;\r\n\r\n    try {\r\n      const customView = await loadCustomView<MfaCustomViewElement>(view);\r\n      if (typeof customView === 'object') {\r\n        customView.providers = this.providers.map((provider) => provider.value);\r\n        customView.returnPath = this.#authContext?.returnPath ?? '';\r\n      }\r\n      return renderCustomView(customView);\r\n    } catch (e) {\r\n      const error = e instanceof Error ? e.message : 'Unknown error';\r\n      console.group('[MFA login] Failed to load custom view');\r\n      console.log('Element reference', this);\r\n      console.log('Custom view', view);\r\n      console.error('Failed to load custom view:', e);\r\n      console.groupEnd();\r\n      return html`<span class=\"text-danger\">${error}</span>`;\r\n    }\r\n  }\r\n\r\n  protected render() {\r\n    return this.#authContext?.twoFactorView\r\n        ? until(this.renderCustomView(), html`\r\n          <uui-loader-bar></uui-loader-bar>`)\r\n        : this.renderDefaultView();\r\n  }\r\n\r\n  static styles = [\r\n    css`\r\n      #header {\r\n        text-align: center;\r\n      }\r\n\r\n      #header h1 {\r\n        font-weight: 400;\r\n        font-size: var(--header-secondary-font-size);\r\n        color: var(--uui-color-interactive);\r\n        line-height: 1.2;\r\n      }\r\n\r\n      form {\r\n        display: flex;\r\n        flex-direction: column;\r\n        gap: var(--uui-size-layout-2);\r\n      }\r\n\r\n      #provider {\r\n        width: 100%;\r\n      }\r\n\r\n      uui-form-layout-item {\r\n        margin: 0;\r\n      }\r\n\r\n      uui-input,\r\n      uui-input-password {\r\n        width: 100%;\r\n        height: var(--input-height);\r\n        border-radius: var(--uui-border-radius);\r\n      }\r\n\r\n      uui-input {\r\n        width: 100%;\r\n      }\r\n\r\n      uui-button {\r\n        width: 100%;\r\n        --uui-button-padding-top-factor: 1.5;\r\n        --uui-button-padding-bottom-factor: 1.5;\r\n      }\r\n\r\n      .text-danger {\r\n        color: var(--uui-color-danger-standalone);\r\n      }\r\n    `,\r\n  ];\r\n}\r\n\r\ndeclare global {\r\n  interface HTMLElementTagNameMap {\r\n    'umb-mfa-page': UmbMfaPageElement;\r\n  }\r\n}\r\n","import type { UUIButtonState } from '@umbraco-cms/backoffice/external/uui';\r\nimport { html, customElement, state } from '@umbraco-cms/backoffice/external/lit';\r\nimport { UmbLitElement } from '@umbraco-cms/backoffice/lit-element';\r\n\r\nimport { UMB_AUTH_CONTEXT } from \"../../contexts\";\r\n\r\n@customElement('umb-new-password-page')\r\nexport default class UmbNewPasswordPageElement extends UmbLitElement {\r\n  @state()\r\n  state: UUIButtonState = undefined;\r\n\r\n  @state()\r\n  page: 'new' | 'done' | 'error' = 'new';\r\n\r\n  @state()\r\n  error = '';\r\n\r\n  @state()\r\n  userId = '';\r\n\r\n  @state()\r\n  resetCode = '';\r\n\r\n  @state()\r\n  loading = true;\r\n\r\n  #authContext?: typeof UMB_AUTH_CONTEXT.TYPE;\r\n\r\n  constructor() {\r\n    super();\r\n    this.consumeContext(UMB_AUTH_CONTEXT, (authContext) => {\r\n      this.#authContext = authContext;\r\n      this.#init();\r\n    });\r\n  }\r\n\r\n  async #init() {\r\n    const urlParams = new URLSearchParams(window.location.search);\r\n    const resetCode = urlParams.get('resetCode');\r\n    const userId = urlParams.get('userId');\r\n\r\n    if (!userId || !resetCode) {\r\n      this.page = 'error';\r\n      this.loading = false;\r\n      return;\r\n    }\r\n\r\n    if (!this.#authContext) return;\r\n\r\n    this.resetCode = resetCode;\r\n    this.userId = userId;\r\n\r\n    const verifyResponse = await this.#authContext.validatePasswordResetCode(this.userId, this.resetCode);\r\n\r\n    if (verifyResponse.error) {\r\n      this.page = 'error';\r\n      this.error = verifyResponse.error;\r\n      this.loading = false;\r\n      return;\r\n    }\r\n\r\n    if (!verifyResponse.passwordConfiguration) {\r\n      this.page = 'error';\r\n      this.error = 'Password configuration is missing';\r\n      this.loading = false;\r\n      return;\r\n    }\r\n\r\n    this.#authContext.passwordConfiguration = verifyResponse.passwordConfiguration;\r\n\r\n    this.loading = false;\r\n  }\r\n\r\n  async #onSubmit(event: CustomEvent) {\r\n    event.preventDefault();\r\n\r\n    this.error = '';\r\n\r\n    if (!this.#authContext) return;\r\n\r\n    const password = event.detail.password;\r\n\r\n    this.state = 'waiting';\r\n    const response = await this.#authContext.newPassword(password, this.resetCode, this.userId);\r\n\r\n    if (response.error) {\r\n      this.state = 'failed';\r\n      this.error = response.error;\r\n      return;\r\n    }\r\n\r\n    this.state = 'success';\r\n    this.page = 'done';\r\n  }\r\n\r\n  #renderRoutes() {\r\n    switch (this.page) {\r\n      case 'new':\r\n        return html`\r\n          <umb-new-password-layout\r\n            @submit=${this.#onSubmit}\r\n            .userId=${this.userId!}\r\n            .state=${this.state}\r\n            .error=${this.error}></umb-new-password-layout>`;\r\n      case 'error':\r\n        return html`\r\n          <umb-error-layout\r\n            header=${this.localize.term('auth_error')}\r\n            message=${this.error ?? this.localize.term('auth_defaultError')}>\r\n          </umb-error-layout>`;\r\n      case 'done':\r\n        return html`\r\n          <umb-confirmation-layout\r\n            header=${this.localize.term('auth_success')}\r\n            message=${this.localize.term('auth_setPasswordConfirmation')}>\r\n          </umb-confirmation-layout>`;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return this.loading ? html`<uui-loader-bar></uui-loader-bar>` : this.#renderRoutes();\r\n  }\r\n}\r\n\r\ndeclare global {\r\n  interface HTMLElementTagNameMap {\r\n    'umb-new-password-page': UmbNewPasswordPageElement;\r\n  }\r\n}\r\n","import type {UUIButtonState} from '@umbraco-cms/backoffice/external/uui';\r\nimport {type CSSResultGroup, css, html, nothing, customElement, state} from '@umbraco-cms/backoffice/external/lit';\r\nimport { UmbLitElement } from \"@umbraco-cms/backoffice/lit-element\";\r\n\r\nimport { UMB_AUTH_CONTEXT } from '../../contexts';\r\n\r\n@customElement('umb-reset-password-page')\r\nexport default class UmbResetPasswordPageElement extends UmbLitElement {\r\n  @state()\r\n  resetCallState: UUIButtonState = undefined;\r\n\r\n  @state()\r\n  error = '';\r\n\r\n  #handleResetSubmit = async (e: SubmitEvent) => {\r\n    e.preventDefault();\r\n    const form = e.target as HTMLFormElement;\r\n\r\n    if (!form) return;\r\n    if (!form.checkValidity()) return;\r\n\r\n    const formData = new FormData(form);\r\n    const username = formData.get('email') as string;\r\n\r\n    this.resetCallState = 'waiting';\r\n    const authContext = await this.getContext(UMB_AUTH_CONTEXT);\r\n    const response = await authContext.resetPassword(username);\r\n    this.resetCallState = response.error ? 'failed' : 'success';\r\n    this.error = response.error || '';\r\n  };\r\n\r\n  #renderResetPage() {\r\n    return html`\r\n      <uui-form>\r\n        <form id=\"LoginForm\" name=\"login\" @submit=\"${this.#handleResetSubmit}\">\r\n          <header id=\"header\">\r\n            <h1>\r\n              <umb-localize key=\"auth_forgottenPassword\">Forgotten password?</umb-localize>\r\n            </h1>\r\n            <span>\r\n\t\t\t\t\t\t\t<umb-localize key=\"auth_forgottenPasswordInstruction\">\r\n                An email will be sent to the address specified with a link to reset your password\r\n              </umb-localize>\r\n\t\t\t\t\t\t</span>\r\n          </header>\r\n\r\n          <uui-form-layout-item>\r\n            <uui-label for=\"email\" slot=\"label\" required>\r\n              <umb-localize key=\"auth_email\">Email</umb-localize>\r\n            </uui-label>\r\n            <uui-input\r\n              type=\"email\"\r\n              id=\"email\"\r\n              name=\"email\"\r\n              .label=${this.localize.term('auth_email')}\r\n              required\r\n              required-message=${this.localize.term('auth_required')}>\r\n            </uui-input>\r\n          </uui-form-layout-item>\r\n\r\n          ${this.#renderErrorMessage()}\r\n\r\n          <uui-button\r\n            type=\"submit\"\r\n            .label=${this.localize.term('auth_submit')}\r\n            look=\"primary\"\r\n            color=\"default\"\r\n            .state=${this.resetCallState}></uui-button>\r\n        </form>\r\n      </uui-form>\r\n\r\n      <umb-back-to-login-button style=\"margin-top: var(--uui-size-space-6)\"></umb-back-to-login-button>\r\n    `;\r\n  }\r\n\r\n  #renderErrorMessage() {\r\n    if (!this.error || this.resetCallState !== 'failed') return nothing;\r\n\r\n    return html`<span class=\"text-danger\">${this.error}</span>`;\r\n  }\r\n\r\n  #renderConfirmationPage() {\r\n    return html`\r\n      <umb-confirmation-layout\r\n        header=${this.localize.term('auth_forgottenPassword')}\r\n        message=${this.localize.term('auth_requestPasswordResetConfirmation')}>\r\n      </umb-confirmation-layout>\r\n    `;\r\n  }\r\n\r\n  render() {\r\n    return this.resetCallState === 'success' ? this.#renderConfirmationPage() : this.#renderResetPage();\r\n  }\r\n\r\n  static styles: CSSResultGroup = [\r\n    css`\r\n      #header {\r\n        text-align: center;\r\n        display: flex;\r\n        flex-direction: column;\r\n        gap: var(--uui-size-space-5);\r\n      }\r\n\r\n      #header span {\r\n        color: var(--uui-color-text-alt); /* TODO Change to uui color when uui gets a muted text variable */\r\n        font-size: 14px;\r\n      }\r\n\r\n      #header h1 {\r\n        margin: 0;\r\n        font-weight: 400;\r\n        font-size: var(--header-secondary-font-size);\r\n        color: var(--uui-color-interactive);\r\n        line-height: 1.2;\r\n      }\r\n\r\n      form {\r\n        display: flex;\r\n        flex-direction: column;\r\n        gap: var(--uui-size-layout-2);\r\n      }\r\n\r\n      uui-form-layout-item {\r\n        margin: 0;\r\n      }\r\n\r\n      uui-input,\r\n      uui-input-password {\r\n        width: 100%;\r\n        height: var(--input-height);\r\n        border-radius: var(--uui-border-radius);\r\n      }\r\n\r\n      uui-input {\r\n        width: 100%;\r\n      }\r\n\r\n      uui-button {\r\n        width: 100%;\r\n        --uui-button-padding-top-factor: 1.5;\r\n        --uui-button-padding-bottom-factor: 1.5;\r\n      }\r\n\r\n      #resend {\r\n        display: inline-flex;\r\n        font-size: 14px;\r\n        align-self: center;\r\n        gap: var(--uui-size-space-1);\r\n      }\r\n\r\n      #resend a {\r\n        color: var(--uui-color-selected);\r\n        font-weight: 600;\r\n        text-decoration: none;\r\n      }\r\n\r\n      #resend a:hover {\r\n        color: var(--uui-color-interactive-emphasis);\r\n      }\r\n    `,\r\n  ];\r\n}\r\n\r\ndeclare global {\r\n  interface HTMLElementTagNameMap {\r\n    'umb-reset-password-page': UmbResetPasswordPageElement;\r\n  }\r\n}\r\n","import { CSSResultGroup, css, html, customElement } from '@umbraco-cms/backoffice/external/lit';\r\nimport { UmbLitElement } from '@umbraco-cms/backoffice/lit-element';\r\n\r\n@customElement('umb-back-to-login-button')\r\nexport default class UmbBackToLoginButtonElement extends UmbLitElement {\r\n\trender() {\r\n\t\treturn html`\r\n\t\t\t<button type=\"button\" @click=${this.#handleClick}>\r\n\t\t\t\t<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\r\n\t\t\t\t\t<path\r\n\t\t\t\t\t\tfill=\"currentColor\"\r\n\t\t\t\t\t\td=\"M7.82843 10.9999H20V12.9999H7.82843L13.1924 18.3638L11.7782 19.778L4 11.9999L11.7782 4.22168L13.1924 5.63589L7.82843 10.9999Z\"></path>\r\n\t\t\t\t</svg>\r\n\t\t\t\t<span><umb-localize key=\"auth_returnToLogin\">Return to login form</umb-localize></span>\r\n\t\t\t</button>\r\n\t\t`;\r\n\t}\r\n\r\n\t#handleClick() {\r\n\t\tthis.dispatchEvent(new CustomEvent('umb-login-flow', { composed: true, detail: { flow: 'login' } }));\r\n\t}\r\n\r\n\tstatic styles: CSSResultGroup = [\r\n\t\tcss`\r\n\t\t\t:host {\r\n\t\t\t\tdisplay: flex;\r\n\t\t\t\talign-items: center;\r\n\t\t\t\tjustify-content: center;\r\n\t\t\t}\r\n\t\t\tbutton {\r\n\t\t\t\tcursor: pointer;\r\n\t\t\t\tbackground: none;\r\n\t\t\t\tborder: 0;\r\n\t\t\t\theight: 1rem;\r\n\t\t\t\tcolor: var(--uui-color-text-alt); /* TODO Change to uui color when uui gets a muted text variable */\r\n\t\t\t\tgap: var(--uui-size-space-1);\r\n\t\t\t\talign-self: center;\r\n\t\t\t\ttext-decoration: none;\r\n\t\t\t\tdisplay: inline-flex;\r\n\t\t\t\tline-height: 1;\r\n\t\t\t\tfont-size: 14px;\r\n\t\t\t\tfont-family: var(--uui-font-family),sans-serif;\r\n\t\t\t}\r\n\t\t\tbutton svg {\r\n\t\t\t\twidth: 1rem;\r\n\t\t\t}\r\n\t\t\tbutton:hover {\r\n\t\t\t\tcolor: var(--uui-color-interactive-emphasis);\r\n\t\t\t}\r\n\t\t`,\r\n\t];\r\n}\r\n\r\ndeclare global {\r\n\tinterface HTMLElementTagNameMap {\r\n\t\t'umb-back-to-login-button': UmbBackToLoginButtonElement;\r\n\t}\r\n}\r\n"],"names":["UmbAuthRepository","UmbRepositoryBase","#localize","UmbLocalizationController","data","request","response","responseData","#getErrorText","error","code","provider","requestData","email","tryExecute","SecurityService","#getApiErrorDetailText","userId","resetCode","password","token","UserService","fallbackText","ApiError","CancelError","UmbAuthContext","UmbContextBase","#authRepository","#returnPath","value","params","returnPath","url","username","UMB_AUTH_CONTEXT","UmbContextToken","UmbSlimBackofficeController","UmbControllerBase","#uuiIconRegistry","UUIIconRegistryEssential","host","UmbBundleExtensionInitializer","umbExtensionsRegistry","UmbAppEntryPointExtensionInitializer","UmbServerExtensionRegistrator","extensions","_authContext","_UmbAuthElement_instances","initializeForm_fn","createInput","opts","input","createLabel","label","umbLocalize","createFormLayoutItem","formLayoutItem","createForm","elements","styles","authStyles","form","element","UmbAuthElement","UmbLitElement","__privateAdd","e","__privateGet","__privateMethod","html","ifDefined","searchParams","flow","status","labelUsername","labelPassword","__decorateClass","property","customElement","_UmbAuthLayoutElement_instances","renderImageContainer_fn","renderContent_fn","UmbAuthLayoutElement","_changedProperties","when","nothing","css","UmbConfirmationLayoutElement","UmbErrorLayoutElement","_UmbNewPasswordLayoutElement_instances","onSubmit_fn","renderErrorMessage_fn","UmbNewPasswordLayoutElement","authContext","pattern","event","formData","passwordConfirm","passwordIsInvalid","passwordValidityText","query","state","_token","_userId","_UmbInvitePageElement_instances","init_fn","UmbInvitePageElement","__privateSet","urlParams","_formElement","_UmbLoginPageElement_instances","onSlotChanged_fn","_handleSubmit","greetingLocalizationKey_get","_onSubmitClick","handleForgottenPassword_fn","UmbLoginPageElement","persist","el","queryAssignedElements","loadCustomView","view","module","renderCustomView","unsafeHTML","_UmbMfaPageElement_instances","loadProviders_fn","handleSubmit_fn","UmbMfaPageElement","customView","until","codeInput","_UmbNewPasswordPageElement_instances","renderRoutes_fn","UmbNewPasswordPageElement","verifyResponse","_handleResetSubmit","_UmbResetPasswordPageElement_instances","renderResetPage_fn","renderConfirmationPage_fn","UmbResetPasswordPageElement","_UmbBackToLoginButtonElement_instances","handleClick_fn","UmbBackToLoginButtonElement"],"mappings":"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"}